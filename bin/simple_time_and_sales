#!/usr/bin/env ruby
#
# This script connects to IB API, subscribes to account info and prints out
# messages received from IB (update every 3 minute or so)

require 'rubygems'
require 'pathname'
require 'bundler/setup'

LIB_DIR = (Pathname.new(__FILE__).dirname + '../lib/').realpath.to_s
$LOAD_PATH.unshift LIB_DIR unless $LOAD_PATH.include?(LIB_DIR)

require 'ib-ruby'

# First, connect to IB TWS.
ib = IB::IB.new

# Uncomment this for verbose debug messages:
# IB::IBLogger.level = Logger::Severity::DEBUG

# Define the symbols we're interested in.
@market =
  {
    123 => IB::Symbols::Futures[:gbp],
    234 => IB::Symbols::Futures[:jpy]
  }


# This method filters out non-:last type events, and filters out any
# sale < MIN_SIZE.
MIN_SIZE = 0

def showSales(msg)
  return if msg.data[:type] != :last || msg.data[:size] < MIN_SIZE
  #puts @market[msg.data[:ticker_id]].description + ": " + msg.data[:size].to_s("F") + " at " + msg.data[:price].to_s("F")
  puts @market[msg.data[:ticker_id]].description +
           ": #{msg.data[:size]} at #{msg.data[:price]}"
end

def showSize(msg)
  puts @market[msg.data[:ticker_id]].description + ": " + msg.to_human
end

# Now, subscribe to TickerPrice and TickerSize events.  The code
# passed in the block will be executed when a message of that type is
# received, with the received message as its argument. In this case,
# we just print out the tick.
#
# Note that we have to look the ticker id of each incoming message
# up in local memory to figure out what it's for.
#
# (N.B. The description field is not from IB TWS. It is defined
#  locally in forex.rb, and is just arbitrary text.)

ib.subscribe(IB::IncomingMessages::TickPrice, lambda {|msg|
               showSales(msg)
             })

ib.subscribe(IB::IncomingMessages::TickSize, lambda {|msg|
              showSize(msg)
             })


# Now we actually request market data for the symbols we're interested in.

@market.each_pair {|id, contract|
  msg = IB::OutgoingMessages::RequestMarketData.new({
                                                      :ticker_id => id,
                                                      :contract => contract
                                                    })
  ib.dispatch(msg)
}

puts "\nSubscribed to TWS market data"
puts "\n******** Press <Enter> to cancel... *********\n\n"
gets
puts "Unsubscribing from TWS market data.."

@market.each_pair {|id, contract|
  msg = IB::OutgoingMessages::CancelMarketData.new({
                                                      :ticker_id => id,
                                                   })
  ib.dispatch(msg)
}
