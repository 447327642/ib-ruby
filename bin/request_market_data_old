#!/usr/bin/env ruby
#
# This script connects to IB API, subscribes to market data for specific symbols

require 'rubygems'
require 'pathname'
require 'bundler/setup'

LIB_DIR = (Pathname.new(__FILE__).dirname + '../lib/').realpath.to_s
$LOAD_PATH.unshift LIB_DIR unless $LOAD_PATH.include?(LIB_DIR)

require 'ib-ruby'

# Definition of what we want market data for.  We have to keep track
# of what ticker id corresponds to what symbol ourselves, because the
# ticks don't include any other identifying information.
#
# The choice of ticker ids is, as far as I can tell, arbitrary.
#
@market = {123 => IB::Symbols::Forex[:gbpusd],
           456 => IB::Symbols::Forex[:eurusd],
           789 => IB::Symbols::Forex[:usdcad]}

# First, connect to IB TWS.
ib = IB::IB.new

# Now, subscribe to TickerPrice and TickerSize events.  The code
# passed in the block will be executed when a message of that type is
# received, with the received message as its argument. In this case,
# we just print out the tick.
#
# Note that we have to look the ticker id of each incoming message
# up in local memory to figure out what it's for.
#
# (N.B. The description field is not from IB TWS. It is defined
#  locally in forex.rb, and is just arbitrary text.)

ib.subscribe(IB::IncomingMessages::TickPrice, lambda { |msg|
  puts @market[msg.data[:ticker_id]].description + ": " + msg.to_human
})

ib.subscribe(IB::IncomingMessages::TickSize, lambda { |msg|
  puts @market[msg.data[:ticker_id]].description + ": " + msg.to_human
})


# Now we actually request market data for the symbols we're interested in.

@market.each_pair { |id, contract|
  msg = IB::OutgoingMessages::RequestMarketData.new({
                                                        :ticker_id => id,
                                                        :contract => contract
                                                    })
  ib.dispatch(msg)
}

puts "\nSubscribed to market data"
puts "\n******** Press <Enter> to cancel... *********\n\n"
gets
puts "Cancelling market data subscription.."

@market.each_pair { |id, contract|
  msg = IB::OutgoingMessages::CancelMarketData.new({
                                                       :ticker_id => id,
                                                       :contract => contract
                                                   })
  ib.dispatch(msg)
}
