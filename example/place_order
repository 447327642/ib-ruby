#!/usr/bin/env ruby
#
# This script ckecks the validity of the contract and then places an buy order for 100 lots

require 'bundler/setup'
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'active_support'
require 'ib-ruby'

# Location of the TWS/Gateway
TWS= 'localhost'  # 'beta:7496' # or 'localhost:4001'  


# Connect to IB TWS.
IB::Gateway.new host: TWS , connect:true
if ( ib = IB::Gateway.tws).present?

  # Lets define a Stock (Default: ncy: USD, Exchange: SMART), and a fake one
  our_stock = IB::Stock.new( symbol:'FAST' )
  fake_stock = IB::Stock.new( symbol:'FAKE' )

  # define the order itself
  buy_order = IB::Order.new total_quantity: 100,
    :limit_price => 1 + rand().round(2),
    :action => 'BUY',
    :order_type => 'LMT'

  # where to perform the Action
  account = IB::Gateway.current.active_accounts.last
  
  # simple anonymous output method
  # All successfully placed orders are kept with there actual status in the orders-array of the account
  monitor_output = -> do
    puts "Wait 5 Sec"
    sleep 5
    account.orders.each{|x| puts x.to_human }
  end
  # the method »update_contract« validates the presence of this symbol 
  # the validated contract is provided in a block
  # only if a valid contract is returned by the tws, the block is evaluated
  # so - if falsy attributes are used in IB::Stock (or  IB::Contract) no attempt to place the order occurs
  # to perform the Order, the tws only needs ConId and Exchange from the contract


  ## place the order on the last detected account
  account.place_order our_stock, buy_order

  ## send RequestMessage to the TWS, IB::Gateway tracks it into the order-array of the account
  IB::Gateway.tws.send_message :RequestAllOpenOrders   

  monitor_output[]


  puts "~"*(39)
  puts "don't forget to cancel the order manually!"
  puts "~"*(39)

  puts "Place Fake stock "
  account.place_order fake_stock, buy_order

  monitor_output[]

  puts "Nothing is transmitted to the tws."
  puts "The Contract »fake-stock» itself is invalid, i.e."
  puts "local_symbol => #{fake_stock.local_symbol}"

else
  puts 'No TWS'
end
