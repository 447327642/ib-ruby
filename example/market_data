#!/usr/bin/env ruby
#
# This script connects to IB API and subscribes to market data for specific symbols

require 'rubygems'
require 'bundler/setup'
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'ib-ruby'

TWS= 'beta:7496' # or 'localhost'  


IB::Gateway.new host: TWS , connect:true

if ( ib = IB::Gateway.tws).present?

  # define the contracts and assign them to the advisor
  IB::Gateway.current.advisor.contracts  <<   IB::Forex.new( symbol:'GBP', currency:'USD' )
  IB::Gateway.current.advisor.contracts  <<   IB::Future.new( symbol:'ES', exchange: 'GLOBEX' ,
							     expiry:'201512', :multiplier => 50)

  # First, connect to IB TWS.


  # Subscribe to TickerPrice and TickerSize events.  The code passed in the block will
  # be executed when a message of that type is received, with the received message as its
  # argument. In this case, we just print out the tick.

  ib.subscribe(:TickPrice, :TickSize, :TickString) do |msg|
    puts msg.inspect
    puts msg.ticker_id
    puts IB::Gateway.current.advisor.contracts.find{|x| x.con_id == msg.ticker_id}.local_symbol + ": " + msg.to_human
  end

  # Now we actually request market data for the symbols we're interested in.
  IB::Gateway.current.advisor.contracts.each do | contract|
    contract.update_contract do |msg|
      ib.send_message :RequestMarketData, :ticker_id => msg.contract.con_id, :contract => msg.contract
    end
  end

  puts "\nSubscribed to market data"
  puts "\n******** Press <Enter> to cancel... *********\n\n"
  STDIN.gets
  puts "Cancelling market data subscription.."

  IB::Gateway.current.advisor.contracts.each do | contract|
    ib.send_message :CancelMarketData, :id => contract.con_id 
  end

  IB::Gateway.current.disconnect

else
  puts 'No TWS'
end
