#!/usr/bin/env ruby
#
# This script exports your IB portfolio in a CSV format. Usage:
# $ example/portfolio_csv [account] > portfolio.csv

=begin
The Gateway provides a method: »get_account_data«, which takes the Accounts we are interested in
as argument.
The result is stored in IB::Gateway.current.active_accounts and there in account_values and portfolio_values.
We just have to extract the informations and display them.

The arrays are filled in the background. When the transfer from the TWS is complete, the »AccountDownloadEnd«-
Event is fired.

The Gateway is extended by a method called »portfolio_csv» which is active as long as 
the Gateway is running. Every call of Gateway#GetAccountData leads to the output of the specified csv-data
=end


require 'bundler/setup'
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'ib-ruby'

# specify the tws to connect
TWS= 'beta:7496' # or 'localhost'  

# Output CSV headers
Header = %w( Account
	      Symbol
	      SecType
	      Expiry
	      Strike
	      Right
	      Currency
	      LocalSymbol
	      Position
	      MarketPrice
	      MarketValue
	      AvgCost
	      UnrealizedPNL
	      RealizedPNL )
# define the Output 
module IB
  class Gateway
    def portfolio_csv
      tws.subscribe( :AccountDownloadEnd )  do | msg |
	for_selected_account( msg.account_name ) do | account |
	# account is an IB::Account which has_many account_values and portfolio_values
	  csv = account.portfolio_values.map do | pv |

	  [ account.account,
	    pv.contract.symbol,
	    IB::CODES[:sec_type][pv.contract.sec_type],
	    pv.contract.expiry,
	    pv.contract.strike == 0 ? "" : pv.contract.strike,
	    pv.contract.right == :none ? "" : pv.contract.right,
	    pv.contract.currency,
	    pv.contract.local_symbol,
	    pv.position,
	    pv.market_price,
	    pv.market_value,
	    pv.average_cost,
	    pv.unrealized_pnl,
	    pv.realized_pnl
	  ] 
	end
	csv.each{|l| puts l.map {|val| "\"#{val}\""}.join(",") }
      end  # for selected account

      end  # subscribe
    end  # def
  end  # class
end # module


#
# First, connect to IB TWS. Suppress any Logging-Informations
IB::Gateway.new host: TWS , connect:true, :logger=> Logger.new('/dev/null') 
if IB::Gateway.tws.present?
puts "\n\n************** Communication to #{IB::Gateway.current.get_host} activated *********************\n\n"
  ## activate the defined subscription
  IB::Gateway.current.portfolio_csv
  # Print the Header
  puts Header.map {|val| "\"#{val}\""}.join(",") 

  ## Perform the query
  IB::Gateway.current.get_account_data

# wait for the query to approach
sleep 2

  
IB::Gateway.current.disconnect
puts "\n\n************** Communication terminated *********************\n\n"

else
  puts 'No TWS'
end
